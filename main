import tkinter as tk
from tkinter import messagebox
import time
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
import io
import sys


class CountdownApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Countdown Notification")
        self.counter = 5
        
        self.label = tk.Label(root, text=f"Countdown: {self.counter}", font=("Helvetica", 24))
        self.label.pack(pady=20)
        
        self.update_label()

    def update_label(self):
        if self.counter > 0:
            self.label.config(text=f"Countdown: {self.counter}")
            self.counter -= 1
            self.root.after(1000, self.update_label)
        else:
            self.label.config(text="Countdown finished!")
            self.root.after(1000, self.root.quit)


class CodeExecutor:
    def __init__(self, root):
        self.root = root
        self.root.title("Python Code Executor")

        self.text_area = tk.Text(root, wrap='word', height=20, width=80)
        self.text_area.pack(pady=10)

        self.run_button = tk.Button(root, text="Run Code", command=self.run_code)
        self.run_button.pack()

        self.output_area = tk.Text(root, wrap='word', height=10, width=80)
        self.output_area.pack(pady=10)

    def run_code(self):
        code_input = self.text_area.get("1.0", tk.END)
        output = io.StringIO()
        sys.stdout = output
        sys.stderr = output
        try:
            exec(code_input, globals())
        except Exception as e:
            output.write(str(e))
        finally:
            sys.stdout = sys.__stdout__
            sys.stderr = sys.__stderr__
            self.output_area.delete("1.0", tk.END)
            self.output_area.insert(tk.END, output.getvalue())


def open_and_close_tabs():
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))
    
    countdown = 5
    while countdown > 0:
        driver.execute_script(f"window.open('data:text/html,<h1>Countdown: {countdown}</h1>');")
        time.sleep(1)
        driver.execute_script("window.close();")
        countdown -= 1

    driver.quit()


def main():
    root = tk.Tk()
    
    # Start countdown notification
    def run_countdown():
        countdown_root = tk.Tk()
        CountdownApp(countdown_root)
        countdown_root.mainloop()

    countdown_thread = threading.Thread(target=run_countdown)
    countdown_thread.start()
    
    # Open and close browser tabs
    tab_thread = threading.Thread(target=open_and_close_tabs)
    tab_thread.start()

    # Run code executor GUI
    run_code_executor(root)
    
    root.mainloop()


if __name__ == "__main__":
    main()
    
